const _Number = {
	/**
	 * @description: 数字
	 */
	Like: /^[0-9]*$/,
	/**
	 * @description: n位的数字
	 * @param n number
	 * @returns RegExp
	 */
	N: (n: number): RegExp => new RegExp(`^\\d{${n}}$`, 'g'),
	/**
	 * @description 至少n位数字
	 * @param n number
	 * @returns RegExp
	 */
	Least_N: (n: number): RegExp => new RegExp(`^\\d{${n},}$`, 'g'),
	/**
	 * @description m-n位数字
	 * @param m number
	 * @param n number
	 * @returns RegExp
	 */
	M_To_N: (m: number, n: number): RegExp => new RegExp(`^\\d{${m},${n}}$`, 'g'),
	/**
	 * @description: 零和非零开头的数字
	 */
	Can_Zero_Begin: /^(0|[1-9][0-9]*)$/,
	//  '非零开头的最多带两位小数的数字：' `^([1-9][0-9]*)+(.[0-9]{1,2})?$`,
	//  '带1' -2位小数的正数或负数：`^(\-)?\d+(\.\d{1,2})?$`,
	//  '正数、负数、和小数：' `^(\-|\+)?\d+(\.\d+)?$`,
	//  '有两位小数的正实数：' `^[0-9]+(.[0-9]{2})?$`,
	//  '有1' ~3位小数的正实数：`^[0-9]+(.[0-9]{1,3})?$`,
	//  '非零的正整数：' `^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$`,
	//  '非零的负整数：' `^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$`,
	//  '非负整数：' `^\d+$ 或 ^[1-9]\d*|0$`,
	//  '非正整数：' `^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$`,
	//  '非负浮点数：' `^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$`,
	//  '非正浮点数：' `^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$`,
	//  '正浮点数：' `^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|(,[0-9]*[1-9][0-9]*))$`
	//  '负浮点数：' `^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.,[0-9]+)|([0-9]*[1-9][0-9]*)))$`
	//  '浮点数：' `^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$`,
}

/**
 * 正则
 */
export const Regular = {
	Number: _Number
}